{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Commits e comandos\
\
1 - Antes de se fazer qualquer commit, a primeira coisa a fazer \'e9 git pull. Isto vai verificar se h\'e1 alguma alguma altera\'e7\'e3o na pasta do computador em rela\'e7\'e3o ao que j\'e1 se encontra no GitHub. Apenas compara os ficheiros que j\'e1 l\'e1 est\'e3o.\
\
2 - A seguir cria-se um novo ramo de trabalho para que o merge possa ser feito em seguran\'e7a e sem haver conflitos como o que j\'e1 est\'e1 feito. O nome do ramo deve, de certa forma, refletir a altera\'e7\'e3o que foi feita ou o que se adicionou de novo ao projeto.\
\
	git branch nome_do_ramo\
\
3 - Depois de criar o ramo executa-se o comando git checkout nome_do_ramo. Para ver todos os ramos existentes faz-se git branch -a.\
\
4 - \
\
}